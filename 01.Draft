

analyse utilisation des fichiers en IO

Tu identifies rapidement les fichiers les plus lents (ceux tout en haut).
	‚Ä¢	Si tempdb ou une base critique est en haut de liste avec des temps >10ms en moyenne, c‚Äôest un signal d‚Äôalerte.

SELECT 
    DB_NAME(vfs.database_id) AS database_name,
    mf.name AS file_name,
    mf.type_desc AS file_type,
    vfs.num_of_reads,
    vfs.num_of_writes,
    vfs.io_stall_read_ms,
    vfs.io_stall_write_ms,
    vfs.io_stall_read_ms + vfs.io_stall_write_ms AS total_stall_ms,
    CASE 
        WHEN vfs.num_of_reads = 0 THEN NULL
        ELSE CONVERT(DECIMAL(10,2), vfs.io_stall_read_ms * 1.0 / vfs.num_of_reads)
    END AS avg_read_latency_ms,
    CASE 
        WHEN vfs.num_of_writes = 0 THEN NULL
        ELSE CONVERT(DECIMAL(10,2), vfs.io_stall_write_ms * 1.0 / vfs.num_of_writes)
    END AS avg_write_latency_ms,
    CASE 
        WHEN (vfs.num_of_reads + vfs.num_of_writes) = 0 THEN NULL
        ELSE CONVERT(DECIMAL(10,2), (vfs.io_stall_read_ms + vfs.io_stall_write_ms) * 1.0 / (vfs.num_of_reads + vfs.num_of_writes))
    END AS avg_io_latency_ms
FROM 
    sys.dm_io_virtual_file_stats(NULL, NULL) AS vfs
JOIN 
    sys.master_files AS mf 
    ON vfs.database_id = mf.database_id AND vfs.file_id = mf.file_id
ORDER BY 
    avg_io_latency_ms DESC;


Colonne
Description
avg_read_latency_ms
Temps moyen d‚Äôattente pour une lecture.
avg_write_latency_ms
Temps moyen d‚Äôattente pour une √©criture.
avg_io_latency_ms
Temps moyen global par op√©ration I/O (lecture ou √©criture).
total_stall_ms
Temps total pass√© en attente (latence cumul√©e).





DECLARE @LoginName SYSNAME = 'oddo\xdat_x_dbm_1';  


IF OBJECT_ID('tempdb..#UserMappings') IS NOT NULL
    DROP TABLE #UserMappings;

CREATE TABLE #UserMappings (
    DatabaseName SYSNAME,
    IsMapped BIT,
    UserName SYSNAME NULL,
    UserType VARCHAR(100) NULL
);

DECLARE @DBName SYSNAME;
DECLARE @SQL NVARCHAR(MAX);

DECLARE db_cursor CURSOR FOR 
SELECT name 
FROM sys.databases 
WHERE state_desc = 'ONLINE' AND name NOT IN ('tempdb');

OPEN db_cursor;
FETCH NEXT FROM db_cursor INTO @DBName;

WHILE @@FETCH_STATUS = 0
BEGIN
    SET @SQL = '
    DECLARE @SID VARBINARY(85) = SUSER_SID(@LoginName);
    USE ' + QUOTENAME(@DBName) + ';
    IF EXISTS (
        SELECT 1 FROM sys.database_principals WHERE sid = @SID
    )
    BEGIN
        INSERT INTO #UserMappings (DatabaseName, IsMapped, UserName, UserType)
        SELECT 
            DB_NAME(),
            1,
            name,
            type_desc
        FROM sys.database_principals
        WHERE sid = @SID;
    END
    ELSE
    BEGIN
        INSERT INTO #UserMappings (DatabaseName, IsMapped, UserName, UserType)
        VALUES (DB_NAME(), 0, NULL, NULL);
    END
    ';

    EXEC sp_executesql @SQL, N'@LoginName SYSNAME', @LoginName;

    FETCH NEXT FROM db_cursor INTO @DBName;
END

CLOSE db_cursor;
DEALLOCATE db_cursor;


SELECT * FROM #UserMappings ORDER BY DatabaseName;

DROP TABLE #UserMappings;


taux d'occupation filegroup

USE [NomDeVotreBase]; -- Remplacez par le nom de votre base de donn√©es
GO

SELECT 
    fg.name AS FilegroupName,
    df.name AS FileName,
    df.physical_name,
    df.size * 8.0 / 1024 AS SizeMB,
    FILEPROPERTY(df.name, 'SpaceUsed') * 8.0 / 1024 AS UsedSpaceMB,
    CAST(
        (FILEPROPERTY(df.name, 'SpaceUsed') * 1.0) / NULLIF(df.size, 0) * 100 
        AS DECIMAL(5,2)
    ) AS UsagePercent
FROM 
    sys.filegroups AS fg
JOIN 
    sys.database_files AS df ON fg.data_space_id = df.data_space_id
WHERE 
    df.type_desc = 'ROWS';








Voici un script PowerShell qui :
	1.	Lit une liste d‚Äôinstances SQL Server depuis un fichier texte ou une variable.
	2.	Se connecte √† chaque instance.
	3.	Supprime un login Active Directory sp√©cifique, s‚Äôil existe.

‚∏ª

üîß Pr√©requis
	‚Ä¢	PowerShell avec le module SqlServer install√© (Install-Module SqlServer si besoin).
	‚Ä¢	Droits suffisants pour supprimer des logins sur les instances SQL Server.
	‚Ä¢	Le compte doit √™tre un login sur chaque instance avec le droit ALTER ANY LOGIN.


# Sp√©cifiez ici le nom du login AD √† supprimer
$adLoginToRemove = "DOMAIN\\nom.utilisateur"

# Liste des instances SQL Server (vous pouvez aussi la charger depuis un fichier)
$sqlInstances = @(
    "SERVEUR1\INSTANCE1",
    "SERVEUR2",
    "SERVEUR3\INSTANCE2"
)

# Parcours des instances
foreach ($instance in $sqlInstances) {
    Write-Host "`nConnexion √† l'instance $instance..."

    try {
        # V√©rifie si le login existe
        $checkLoginQuery = @"
IF EXISTS (SELECT 1 FROM sys.server_principals WHERE name = N'$adLoginToRemove')
    SELECT 1 AS LoginExists
ELSE
    SELECT 0 AS LoginExists
"@

        $loginExists = Invoke-Sqlcmd -ServerInstance $instance -Query $checkLoginQuery

        if ($loginExists.LoginExists -eq 1) {
            Write-Host "‚Üí Le login '$adLoginToRemove' existe. Suppression en cours..."

            $dropLoginQuery = "DROP LOGIN [$adLoginToRemove]"

            Invoke-Sqlcmd -ServerInstance $instance -Query $dropLoginQuery
            Write-Host "‚úîÔ∏è Login supprim√© avec succ√®s de $instance"
        } else {
            Write-Host "‚ÑπÔ∏è Le login '$adLoginToRemove' n'existe pas sur $instance"
        }
    }
    catch {
        Write-Warning "‚ö†Ô∏è Erreur lors du traitement de l'instance $instance : $_"
    }
}



Notes
	‚Ä¢	Si tu veux lire les instances depuis un fichier texte (par ex. instances.txt), remplace cette ligne :


$sqlInstances = @(

par

$sqlInstances = Get-Content -Path "C:\chemin\vers\instances.txt"


	‚Ä¢	Le login doit √™tre au format DOMAIN\utilisateur.






Pour ex√©cuter nimporte quel query sur une liste de server

Script PowerShell : ex√©cution de requ√™te sur toutes les instances

# Chemin vers le fichier contenant la liste des instances SQL Server
$instanceListPath = "C:\chemin\vers\instances.txt"

# Charger les instances SQL
$sqlInstances = Get-Content -Path $instanceListPath

# Sp√©cifiez ici votre requ√™te SQL √† ex√©cuter
$queryToRun = @"
-- Exemple : afficher les bases de donn√©es
SELECT name, state_desc FROM sys.databases
"@

# Boucle sur chaque instance
foreach ($instance in $sqlInstances) {
    Write-Host "`nConnexion √† l'instance $instance..."

    try {
        # Ex√©cution de la requ√™te
        $results = Invoke-Sqlcmd -ServerInstance $instance -Query $queryToRun -ErrorAction Stop

        if ($results) {
            Write-Host "‚úîÔ∏è R√©sultats depuis $instance :"
            $results | Format-Table -AutoSize
        } else {
            Write-Host "‚ÑπÔ∏è Aucune donn√©e retourn√©e par $instance"
        }
    }
    catch {
        Write-Warning "‚ö†Ô∏è Erreur sur l'instance $instance : $_"
    }
}




pour sauvegarder le fichier

$results | Export-Csv -Path "C:\temp\resultats_$($instance -replace '\\', '_').csv" -NoTypeInformation


exemple de query a changer

$queryToRun = "SELECT @@VERSION AS Version"






autre script pour supprimer les login


# Chemin vers le fichier contenant la liste des instances SQL Server
$instanceListPath = "C:\chemin\vers\instances.txt"

# Charger les instances SQL
$sqlInstances = Get-Content -Path $instanceListPath

# Login AD √† supprimer (√©chapp√© correctement pour T-SQL)
$loginToDrop = "DOMAIN\\nom.utilisateur"

# Requ√™te compl√®te : v√©rifie d'abord si le login existe avant de le supprimer
$queryToRun = @"
IF EXISTS (SELECT 1 FROM sys.server_principals WHERE name = N'$loginToDrop')
BEGIN
    DROP LOGIN [$loginToDrop]
    PRINT 'Login supprim√©.'
END
ELSE
BEGIN
    PRINT 'Login non trouv√©.'
END
"@

# Ex√©cution sur chaque instance
foreach ($instance in $sqlInstances) {
    Write-Host "`nConnexion √† $instance..."

    try {
        $result = Invoke-Sqlcmd -ServerInstance $instance -Query $queryToRun -ErrorAction Stop
        Write-Host "‚úîÔ∏è $instance :"
        $result | ForEach-Object { Write-Host $_ }
    }
    catch {
        Write-Warning "‚ö†Ô∏è Erreur sur $instance : $_"
    }
}

Ce que fait ce script
	‚Ä¢	‚úÖ V√©rifie l‚Äôexistence du login sur chaque instance.
	‚Ä¢	‚úÖ Le supprime uniquement s‚Äôil est pr√©sent.
	‚Ä¢	‚úÖ Affiche un message clair (Login supprim√©. ou Login non trouv√©.).
	‚Ä¢	‚ùå √âvite les erreurs T-SQL si le login est absent.


voir les session

SELECT 
    s.session_id,
    r.request_id,
    s.login_name,
    s.host_name,
    s.program_name,
    r.status,
    r.command,
    r.start_time,
    r.cpu_time,
    r.total_elapsed_time / 1000.0 AS elapsed_seconds,
    r.memory_usage * 8 AS memory_usage_MB,
    t.text AS sql_text
FROM sys.dm_exec_sessions s
JOIN sys.dm_exec_requests r ON s.session_id = r.session_id
CROSS APPLY sys.dm_exec_sql_text(r.sql_handle) t
ORDER BY r.memory_usage DESC

WHERE s.session_id = 143,



 voir si un plan d'ex√©cution forc√© a echou√©

SELECT 
    qsp.query_id,
    qsp.plan_id,
    qsp.is_forced_plan,
    qsp.is_forced_plan_failed,
    qsqt.query_sql_text,
    qsp.last_execution_time
FROM sys.query_store_plan qsp
JOIN sys.query_store_query qsq ON qsp.query_id = qsq.query_id
JOIN sys.query_store_query_text qsqt ON qsq.query_text_id = qsqt.query_text_id
WHERE qsp.is_forced_plan = 1;

Si is_forced_plan_failed = 1 ‚Üí le plan a √©chou√©.












-- 1. V√©rification des fonctionnalit√©s Enterprise utilis√©es (globales)
SELECT 
    feature_name,
    feature_id,
    usage_count,
    last_usage_time
FROM 
    sys.dm_db_persisted_sku_features;

-- 2. Bases de donn√©es utilisant TDE (Transparent Data Encryption)
SELECT 
    name AS DatabaseName,
    is_encrypted
FROM 
    sys.databases
WHERE 
    is_encrypted = 1;

-- 3. Index Columnstore (Enterprise uniquement dans certaines versions)
EXEC sp_MSforeachdb '
USE [?];
SELECT 
    DB_NAME() AS DatabaseName,
    OBJECT_NAME(object_id) AS TableName,
    name AS IndexName,
    type_desc
FROM 
    sys.indexes 
WHERE 
    type_desc LIKE ''%COLUMNSTORE%''';

-- 4. Compression de donn√©es utilis√©e sur les index
EXEC sp_MSforeachdb '
USE [?];
SELECT 
    DB_NAME() AS DatabaseName,
    OBJECT_NAME(i.object_id) AS TableName,
    i.name AS IndexName,
    p.data_compression_desc
FROM 
    sys.partitions p
JOIN 
    sys.indexes i ON p.object_id = i.object_id AND p.index_id = p.index_id
WHERE 
    p.data_compression <> 0';

-- 5. Tables partitionn√©es
EXEC sp_MSforeachdb '
USE [?];
SELECT 
    DB_NAME() AS DatabaseName,
    name AS TableName
FROM 
    sys.tables 
WHERE 
    is_ms_shipped = 0 AND is_partitioned = 1';

-- 6. In-Memory OLTP utilis√©
EXEC sp_MSforeachdb '
USE [?];
IF EXISTS (SELECT * FROM sys.tables WHERE is_memory_optimized = 1)
BEGIN
    SELECT 
        DB_NAME() AS DatabaseName,
        name AS TableName,
        durability_desc
    FROM 
        sys.memory_optimized_tables_internal_attributes;
END';

-- 7. Change Data Capture (CDC) utilis√©
EXEC sp_MSforeachdb '
USE [?];
IF EXISTS (SELECT * FROM sys.tables WHERE is_tracked_by_cdc = 1)
BEGIN
    SELECT 
        DB_NAME() AS DatabaseName,
        name AS TableName
    FROM 
        sys.tables 
    WHERE 
        is_tracked_by_cdc = 1;
END';







-- 1. Fonctionnalit√©s Enterprise d√©tect√©es par SQL Server
SELECT 
    feature_name,
    feature_id
FROM 
    sys.dm_db_persisted_sku_features;

-- 2. Bases avec TDE activ√© (Transparent Data Encryption)
SELECT 
    name AS DatabaseName,
    is_encrypted
FROM 
    sys.databases
WHERE 
    is_encrypted = 1;

-- 3. Recherche d‚Äôindex COLUMNSTORE
EXEC sp_MSforeachdb '
USE [?];
IF DB_ID(''?'') NOT IN (1,2,3,4)
BEGIN
    SELECT 
        DB_NAME() AS DatabaseName,
        OBJECT_NAME(object_id) AS TableName,
        name AS IndexName,
        type_desc
    FROM 
        sys.indexes
    WHERE 
        type_desc LIKE ''%COLUMNSTORE%''
        AND OBJECTPROPERTY(object_id, ''IsMsShipped'') = 0;
END
';

-- 4. V√©rification de la compression utilis√©e
EXEC sp_MSforeachdb '
USE [?];
IF DB_ID(''?'') NOT IN (1,2,3,4)
BEGIN
    SELECT 
        DB_NAME() AS DatabaseName,
        OBJECT_NAME(p.object_id) AS TableName,
        i.name AS IndexName,
        p.data_compression_desc
    FROM 
        sys.partitions p
    JOIN 
        sys.indexes i ON p.object_id = i.object_id AND p.index_id = i.index_id
    WHERE 
        p.data_compression IN (1, 2) -- 1 = ROW, 2 = PAGE
        AND OBJECTPROPERTY(p.object_id, ''IsMsShipped'') = 0;
END
';

-- 5. Tables partitionn√©es
EXEC sp_MSforeachdb '
USE [?];
IF DB_ID(''?'') NOT IN (1,2,3,4)
BEGIN
    SELECT 
        DB_NAME() AS DatabaseName,
        name AS TableName
    FROM 
        sys.tables
    WHERE 
        is_partitioned = 1
        AND is_ms_shipped = 0;
END
';

-- 6. In-Memory OLTP (Memory-Optimized Tables)
EXEC sp_MSforeachdb '
USE [?];
IF EXISTS (
    SELECT 1 FROM sys.tables WHERE is_memory_optimized = 1
)
BEGIN
    SELECT 
        DB_NAME() AS DatabaseName,
        name AS TableName
    FROM 
        sys.tables
    WHERE 
        is_memory_optimized = 1;
END
';

-- 7. CDC activ√© (Change Data Capture)
EXEC sp_MSforeachdb '
USE [?];
IF EXISTS (
    SELECT 1 FROM sys.tables WHERE is_tracked_by_cdc = 1
)
BEGIN
    SELECT 
        DB_NAME() AS DatabaseName,
        name AS TableName
    FROM 
        sys.tables
    WHERE 
        is_tracked_by_cdc = 1;
END
';




voir lez objets partitioner 

EXEC sp_MSforeachdb '
USE [?];
IF DB_ID(''?'') NOT IN (1,2,3,4)
BEGIN
    SELECT 
        DB_NAME() AS DatabaseName,
        t.name AS TableName,
        i.name AS IndexName,
        ps.name AS PartitionScheme
    FROM 
        sys.indexes i
    INNER JOIN 
        sys.tables t ON i.object_id = t.object_id
    INNER JOIN 
        sys.data_spaces ds ON i.data_space_id = ds.data_space_id
    LEFT JOIN 
        sys.partition_schemes ps ON ds.data_space_id = ps.data_space_id
    WHERE 
        ps.name IS NOT NULL
        AND t.is_ms_shipped = 0;
END
';

