mettre un extended event en place

1) Créer + démarrer la session (fichiers roulants)

⚠️ Adapte le chemin D:\SqlAudit\ à un dossier existant où le compte SQL Server a les droits.

USE [DB_LDW_FULL];
GO
DECLARE @schema sysname = N'dbo';
DECLARE @table  sysname = N'INS_GDV_GeneriqueDevises';
DECLARE @session sysname = N'WhoWrites_INS_GDV_GeneriqueDevises';

-- Nettoyage si déjà existant
IF EXISTS (SELECT 1 FROM sys.server_event_sessions WHERE name = @session)
BEGIN
  ALTER EVENT SESSION [WhoWrites_INS_GDV_GeneriqueDevises] ON SERVER STATE = STOP;
  DROP EVENT SESSION [WhoWrites_INS_GDV_GeneriqueDevises] ON SERVER;
END
GO

-- Création (fichier .xel avec rotation)
CREATE EVENT SESSION [WhoWrites_INS_GDV_GeneriqueDevises] ON SERVER
ADD EVENT sqlserver.sql_statement_completed(
    ACTION(sqlserver.client_app_name,sqlserver.client_hostname,sqlserver.database_name,
           sqlserver.session_id,sqlserver.username)
    WHERE ( sqlserver.database_name = DB_NAME()
         AND ( statement LIKE N'%INSERT%['+N'dbo'+'].['+N'INS_GDV_GeneriqueDevises'+']%'
            OR statement LIKE N'%UPDATE%['+N'dbo'+'].['+N'INS_GDV_GeneriqueDevises'+']%'
            OR statement LIKE N'%DELETE%['+N'dbo'+'].['+N'INS_GDV_GeneriqueDevises'+']%' ) )
),
ADD EVENT sqlserver.rpc_completed(
    ACTION(sqlserver.client_app_name,sqlserver.client_hostname,sqlserver.database_name,
           sqlserver.session_id,sqlserver.username)
    WHERE ( sqlserver.database_name = DB_NAME()
         AND statement LIKE N'%['+N'dbo'+'].['+N'INS_GDV_GeneriqueDevises'+']%' )
),
ADD EVENT sqlserver.sql_batch_completed(
    ACTION(sqlserver.client_app_name,sqlserver.client_hostname,sqlserver.database_name,
           sqlserver.session_id,sqlserver.username)
    WHERE ( sqlserver.database_name = DB_NAME()
         AND statement LIKE N'%['+N'dbo'+'].['+N'INS_GDV_GeneriqueDevises'+']%' )
)
ADD TARGET package0.event_file(
    SET filename=N'D:\SqlAudit\WhoWrites_INS_GDV_GeneriqueDevises.xel',
        max_file_size=(50),          -- 50 Mo par fichier
        max_rollover_files=(10)      -- ~500 Mo au total
);
GO

-- Démarrer
ALTER EVENT SESSION [WhoWrites_INS_GDV_GeneriqueDevises] ON SERVER STATE = START;


Tu peux laisser tourner en continu. Les fichiers se rouleront (ici 10 × 50 Mo max).

⸻

2) Lecture des fichiers .xel

-- Adapter le chemin si besoin (utiliser le même dossier que ci-dessus)
;WITH X AS (
    SELECT CONVERT(xml, event_data) AS x
    FROM sys.fn_xe_file_target_read_file(
           N'D:\SqlAudit\WhoWrites_INS_GDV_GeneriqueDevises*.xel', NULL, NULL, NULL)
)
SELECT
  DATEADD(minute, DATEDIFF(minute, GETUTCDATE(), SYSUTCDATETIME()),
          X.x.value('(event/@timestamp)[1]','datetime2'))              AS event_time,
  X.x.value('(event/action[@name="username"]/value)[1]','sysname')    AS login_name,
  X.x.value('(event/action[@name="client_hostname"]/value)[1]','nvarchar(128)') AS host_name,
  X.x.value('(event/action[@name="client_app_name"]/value)[1]','nvarchar(128)') AS app_name,
  X.x.value('(event/action[@name="session_id"]/value)[1]','int')      AS session_id,
  COALESCE(
    X.x.value('(event/data[@name="statement"]/value)[1]','nvarchar(max)'),
    X.x.value('(event/data[@name="batch_text"]/value)[1]','nvarchar(max)')
  ) AS sql_text,
  X.x.value('(event/@name)[1]','nvarchar(64)')                         AS event_name
FROM X
ORDER BY event_time DESC;

3) Arrêter / supprimer (quand tu as identifié la source)

ALTER EVENT SESSION [WhoWrites_INS_GDV_GeneriqueDevises] ON SERVER STATE = STOP;
DROP EVENT SESSION  [WhoWrites_INS_GDV_GeneriqueDevises] ON SERVER;





Trouver dans le journal des transactions qui a modifié récemment


-- >>> A D A P T E R <<<
DECLARE @schema sysname = N'dbo';
DECLARE @table  sysname = N'test1';

;WITH AU AS (  -- toutes les AU liées à la table (row/LOB/overflow)
    SELECT au.allocation_unit_id
    FROM sys.partitions p
    JOIN sys.allocation_units au
         ON au.container_id IN (p.hobt_id, p.partition_id)
    WHERE p.object_id = OBJECT_ID(QUOTENAME(@schema)+'.'+QUOTENAME(@table))
),
L AS (  -- journal brut
    SELECT * FROM sys.fn_dblog(NULL,NULL)
),
O AS (  -- opérations qui touchent la table
    SELECT
        [Transaction ID]     AS tran_id,
        [Operation],
        [Context],
        [AllocUnitId],
        [AllocUnitName],
        [Page ID],
        [Slot ID]
    FROM L
    WHERE [AllocUnitId] IN (SELECT allocation_unit_id FROM AU)
      AND [Operation] IN ('LOP_INSERT_ROWS','LOP_MODIFY_ROW','LOP_DELETE_ROWS')
),
B AS (  -- début de transaction
    SELECT
        [Transaction ID]                 AS tran_id,
        CONVERT(datetime,[Begin Time])   AS begin_time,
        [SPID]                           AS session_id,
        SUSER_SNAME([Transaction SID])   AS login_name,
        [Transaction Name]               AS tran_name
    FROM L
    WHERE [Operation] = 'LOP_BEGIN_XACT'
),
C AS (  -- commit (optionnel)
    SELECT
        [Transaction ID]                 AS tran_id,
        CONVERT(datetime,[End Time])     AS end_time
    FROM L
    WHERE [Operation] = 'LOP_COMMIT_XACT'
)
SELECT TOP (200)
    B.begin_time,
    C.end_time,
    B.login_name,
    B.session_id,
    B.tran_name,
    O.Operation, O.Context,
    O.AllocUnitName,
    O.[Page ID], O.[Slot ID],
    O.tran_id
FROM O
LEFT JOIN B ON B.tran_id = O.tran_id
LEFT JOIN C ON C.tran_id = O.tran_id
ORDER BY B.begin_time DESC, O.tran_id, O.Operation;



Tracer à partir de maintenant (léger) avec Extended Events

-- 🔧 A adapter : schéma/table + chemin de fichier cible
DECLARE @schema sysname = N'dbo';
DECLARE @table  sysname = N'TaTable';

IF EXISTS (SELECT 1 FROM sys.server_event_sessions WHERE name = 'WhoWritesMyTable')
    DROP EVENT SESSION WhoWritesMyTable ON SERVER;
GO
CREATE EVENT SESSION WhoWritesMyTable ON SERVER
ADD EVENT sqlserver.sql_statement_completed(
    ACTION(sqlserver.client_app_name,sqlserver.client_hostname,sqlserver.username,sqlserver.database_name,sqlserver.session_id)
    WHERE (sqlserver.database_name = DB_NAME()
       AND (statement LIKE '%INSERT%['+@schema+'].['+@table+']%'
         OR statement LIKE '%UPDATE%['+@schema+'].['+@table+']%'
         OR statement LIKE '%DELETE%['+@schema+'].['+@table+']%'))),
ADD EVENT sqlserver.rpc_completed(
    ACTION(sqlserver.client_app_name,sqlserver.client_hostname,sqlserver.username,sqlserver.database_name,sqlserver.session_id)
    WHERE (sqlserver.database_name = DB_NAME()
       AND statement LIKE '%['+@schema+'].['+@table+']%'))
ADD TARGET package0.event_file(SET filename=N'C:\Temp\WhoWritesMyTable.xel', max_file_size=(50), max_rollover_files=(4));
GO
ALTER EVENT SESSION WhoWritesMyTable ON SERVER STATE = START;

lire ensuite

SELECT
    DATEADD(hh, DATEDIFF(hh, GETUTCDATE(), SYSDATETIME()), event_data.value('(event/@timestamp)[1]', 'datetime2')) AS event_time,
    event_data.value('(event/action[@name="username"]/value)[1]','sysname')      AS login_name,
    event_data.value('(event/action[@name="client_hostname"]/value)[1]','nvarchar(128)') AS host_name,
    event_data.value('(event/action[@name="client_app_name"]/value)[1]','nvarchar(128)') AS app_name,
    event_data.value('(event/action[@name="session_id"]/value)[1]','int')        AS session_id,
    event_data.value('(event/data[@name="statement"]/value)[1]','nvarchar(max)') AS sql_text,
    event_data.value('(event/@name)[1]','nvarchar(100)')                          AS event_name
FROM (
    SELECT CONVERT(xml, event_data) AS event_data
    FROM sys.fn_xe_file_target_read_file('C:\Temp\WhoWritesMyTable*.xel', NULL, NULL, NULL)
) x
ORDER BY event_time DESC;


4) Audit SQL Server (persistant, propre, peu intrusif)

Audite spécifiquement INSERT/UPDATE/DELETE sur ta table vers un fichier.

-- 🔧 Chemin à adapter
IF NOT EXISTS (SELECT 1 FROM sys.server_audits WHERE name = 'Audit_DML_Table')
    CREATE SERVER AUDIT Audit_DML_Table
    TO FILE (FILEPATH = N'C:\Temp\AuditDML\')
    WITH (QUEUE_DELAY = 1000, ON_FAILURE = CONTINUE);
ALTER SERVER AUDIT Audit_DML_Table WITH (STATE = ON);
GO

IF EXISTS (SELECT 1 FROM sys.database_audit_specifications WHERE name = 'Audit_DML_Table_Spec')
    DROP DATABASE AUDIT SPECIFICATION Audit_DML_Table_Spec;
GO
CREATE DATABASE AUDIT SPECIFICATION Audit_DML_Table_Spec
FOR SERVER AUDIT Audit_DML_Table
    ADD (INSERT ON OBJECT::dbo.TaTable BY PUBLIC),
    ADD (UPDATE ON OBJECT::dbo.TaTable BY PUBLIC),
    ADD (DELETE ON OBJECT::dbo.TaTable BY PUBLIC);
ALTER DATABASE AUDIT SPECIFICATION Audit_DML_Table_Spec WITH (STATE = ON);
GO


 lire l'audit

SELECT
    event_time, action_id, succeeded, session_server_principal_name AS login_name,
    server_principal_name, database_principal_name,
    statement, object_name, schema_name, client_ip, application_name
FROM sys.fn_get_audit_file('C:\Temp\AuditDML\*.sqlaudit', DEFAULT, DEFAULT)
ORDER BY event_time DESC;




SET NOCOUNT ON;

DECLARE @db SYSNAME, @sql NVARCHAR(MAX);

DECLARE db_cursor CURSOR FOR
SELECT name
FROM sys.databases
WHERE state = 0  -- seulement les bases online
  AND database_id > 4; -- exclure master, model, msdb, tempdb

OPEN db_cursor;
FETCH NEXT FROM db_cursor INTO @db;

WHILE @@FETCH_STATUS = 0
BEGIN
    PRINT '=== Checking database: ' + @db;

    SET @sql = N'
    USE [' + QUOTENAME(@db) + N'];

    -- Orphan users
    SELECT dp.name AS UserName,
           dp.sid  AS UserSID
    INTO #tmpOrphans
    FROM sys.database_principals dp
    LEFT JOIN sys.server_principals sp ON dp.sid = sp.sid
    WHERE dp.type_desc = ''SQL_USER''
      AND dp.principal_id > 4
      AND sp.sid IS NULL;

    DECLARE @User SYSNAME, @cmd NVARCHAR(MAX);

    DECLARE c CURSOR FOR SELECT UserName FROM #tmpOrphans;
    OPEN c;
    FETCH NEXT FROM c INTO @User;

    WHILE @@FETCH_STATUS = 0
    BEGIN
        IF EXISTS (SELECT 1 FROM sys.server_principals WHERE name = @User)
        BEGIN
            SET @cmd = N''ALTER USER ['' + @User + N''] WITH LOGIN = ['' + @User + N''];'';
            PRINT ''[' + @db + '] Fixing orphan user: '' + @User;
            EXEC (@cmd);
        END
        ELSE
        BEGIN
            SET @cmd = N''DROP USER ['' + @User + N''];'';
            PRINT ''[' + @db + '] Removing orphan user: '' + @User;
            BEGIN TRY
                EXEC (@cmd);
            END TRY
            BEGIN CATCH
                PRINT ''[ERROR] Could not drop user '' + @User + '': '' + ERROR_MESSAGE();
            END CATCH;
        END

        FETCH NEXT FROM c INTO @User;
    END

    CLOSE c;
    DEALLOCATE c;

    DROP TABLE #tmpOrphans;
    ';

    EXEC sys.sp_executesql @sql;

    FETCH NEXT FROM db_cursor INTO @db;
END

CLOSE db_cursor;
DEALLOCATE db_cursor;





*********^

DECLARE @dbName NVARCHAR(128);
DECLARE @sql NVARCHAR(MAX);

DECLARE db_cursor CURSOR FOR
SELECT name
FROM sys.databases
WHERE state_desc = 'ONLINE'
  AND name NOT IN ('tempdb'); -- tu peux en ajouter d'autres à exclure

OPEN db_cursor;
FETCH NEXT FROM db_cursor INTO @dbName;

WHILE @@FETCH_STATUS = 0
BEGIN
    PRINT '===========================';
    PRINT ' Vérification dans : ' + @dbName;
    PRINT '===========================';

    SET @sql = '
    USE [' + @dbName + '];
    SELECT ''' + @dbName + ''' AS database_name, name AS partition_scheme_name
    FROM sys.partition_schemes;
    ';

    EXEC sp_executesql @sql;

    FETCH NEXT FROM db_cursor INTO @dbName;
END

CLOSE db_cursor;
DEALLOCATE db_cursor;








DECLARE @dbName NVARCHAR(128);
DECLARE @sql NVARCHAR(MAX);

DECLARE db_cursor CURSOR FOR
SELECT name
FROM sys.databases
WHERE state_desc = 'ONLINE'
  AND name NOT IN ('tempdb'); -- facultatif : exclure tempdb

OPEN db_cursor;
FETCH NEXT FROM db_cursor INTO @dbName;

WHILE @@FETCH_STATUS = 0
BEGIN
    PRINT '====================================================';
    PRINT '🔍 Vérification partitionnement dans la base : ' + @dbName;
    PRINT '====================================================';

    SET @sql = '
    USE [' + @dbName + '];

    SELECT 
        DB_NAME() AS database_name,
        o.name AS object_name,
        o.type_desc,
        i.name AS index_name,
        ps.name AS partition_scheme
    FROM sys.indexes i
    JOIN sys.partition_schemes ps ON i.data_space_id = ps.data_space_id
    JOIN sys.objects o ON i.object_id = o.object_id
    WHERE o.is_ms_shipped = 0
    ORDER BY o.name;
    ';

    EXEC sp_executesql @sql;

    FETCH NEXT FROM db_cursor INTO @dbName;
END

CLOSE db_cursor;
DEALLOCATE db_cursor;




XDATLWBSA0001
XDATLWCOG0003
XDATLWESG0001
XDATLWIFA0001
XDATLWLGW0001
XDATLWMUT0042
XDATLWPAD0001
XDATLWZEM0105

votre l'utilisateur de la mémoire 

-- Utilisation mémoire par SQL Server
SELECT 
    physical_memory_in_use_kb / 1024 AS memory_used_MB,
    large_page_allocations_kb / 1024 AS large_page_MB,
    locked_page_allocations_kb / 1024 AS locked_page_MB,
    total_virtual_address_space_kb / 1024 AS total_VAS_MB
FROM sys.dm_os_process_memory;



analyse utilisation des fichiers en IO

Tu identifies rapidement les fichiers les plus lents (ceux tout en haut).
	•	Si tempdb ou une base critique est en haut de liste avec des temps >10ms en moyenne, c’est un signal d’alerte.

SELECT 
    DB_NAME(vfs.database_id) AS database_name,
    mf.name AS file_name,
    mf.type_desc AS file_type,
    vfs.num_of_reads,
    vfs.num_of_writes,
    vfs.io_stall_read_ms,
    vfs.io_stall_write_ms,
    vfs.io_stall_read_ms + vfs.io_stall_write_ms AS total_stall_ms,
    CASE 
        WHEN vfs.num_of_reads = 0 THEN NULL
        ELSE CONVERT(DECIMAL(10,2), vfs.io_stall_read_ms * 1.0 / vfs.num_of_reads)
    END AS avg_read_latency_ms,
    CASE 
        WHEN vfs.num_of_writes = 0 THEN NULL
        ELSE CONVERT(DECIMAL(10,2), vfs.io_stall_write_ms * 1.0 / vfs.num_of_writes)
    END AS avg_write_latency_ms,
    CASE 
        WHEN (vfs.num_of_reads + vfs.num_of_writes) = 0 THEN NULL
        ELSE CONVERT(DECIMAL(10,2), (vfs.io_stall_read_ms + vfs.io_stall_write_ms) * 1.0 / (vfs.num_of_reads + vfs.num_of_writes))
    END AS avg_io_latency_ms
FROM 
    sys.dm_io_virtual_file_stats(NULL, NULL) AS vfs
JOIN 
    sys.master_files AS mf 
    ON vfs.database_id = mf.database_id AND vfs.file_id = mf.file_id
ORDER BY 
    avg_io_latency_ms DESC;


Colonne
Description
avg_read_latency_ms
Temps moyen d’attente pour une lecture.
avg_write_latency_ms
Temps moyen d’attente pour une écriture.
avg_io_latency_ms
Temps moyen global par opération I/O (lecture ou écriture).
total_stall_ms
Temps total passé en attente (latence cumulée).





DECLARE @LoginName SYSNAME = 'oddo\xdat_x_dbm_1';  


IF OBJECT_ID('tempdb..#UserMappings') IS NOT NULL
    DROP TABLE #UserMappings;

CREATE TABLE #UserMappings (
    DatabaseName SYSNAME,
    IsMapped BIT,
    UserName SYSNAME NULL,
    UserType VARCHAR(100) NULL
);

DECLARE @DBName SYSNAME;
DECLARE @SQL NVARCHAR(MAX);

DECLARE db_cursor CURSOR FOR 
SELECT name 
FROM sys.databases 
WHERE state_desc = 'ONLINE' AND name NOT IN ('tempdb');

OPEN db_cursor;
FETCH NEXT FROM db_cursor INTO @DBName;

WHILE @@FETCH_STATUS = 0
BEGIN
    SET @SQL = '
    DECLARE @SID VARBINARY(85) = SUSER_SID(@LoginName);
    USE ' + QUOTENAME(@DBName) + ';
    IF EXISTS (
        SELECT 1 FROM sys.database_principals WHERE sid = @SID
    )
    BEGIN
        INSERT INTO #UserMappings (DatabaseName, IsMapped, UserName, UserType)
        SELECT 
            DB_NAME(),
            1,
            name,
            type_desc
        FROM sys.database_principals
        WHERE sid = @SID;
    END
    ELSE
    BEGIN
        INSERT INTO #UserMappings (DatabaseName, IsMapped, UserName, UserType)
        VALUES (DB_NAME(), 0, NULL, NULL);
    END
    ';

    EXEC sp_executesql @SQL, N'@LoginName SYSNAME', @LoginName;

    FETCH NEXT FROM db_cursor INTO @DBName;
END

CLOSE db_cursor;
DEALLOCATE db_cursor;


SELECT * FROM #UserMappings ORDER BY DatabaseName;

DROP TABLE #UserMappings;


taux d'occupation filegroup

USE [NomDeVotreBase]; -- Remplacez par le nom de votre base de données
GO

SELECT 
    fg.name AS FilegroupName,
    df.name AS FileName,
    df.physical_name,
    df.size * 8.0 / 1024 AS SizeMB,
    FILEPROPERTY(df.name, 'SpaceUsed') * 8.0 / 1024 AS UsedSpaceMB,
    CAST(
        (FILEPROPERTY(df.name, 'SpaceUsed') * 1.0) / NULLIF(df.size, 0) * 100 
        AS DECIMAL(5,2)
    ) AS UsagePercent
FROM 
    sys.filegroups AS fg
JOIN 
    sys.database_files AS df ON fg.data_space_id = df.data_space_id
WHERE 
    df.type_desc = 'ROWS';








Voici un script PowerShell qui :
	1.	Lit une liste d’instances SQL Server depuis un fichier texte ou une variable.
	2.	Se connecte à chaque instance.
	3.	Supprime un login Active Directory spécifique, s’il existe.

⸻

🔧 Prérequis
	•	PowerShell avec le module SqlServer installé (Install-Module SqlServer si besoin).
	•	Droits suffisants pour supprimer des logins sur les instances SQL Server.
	•	Le compte doit être un login sur chaque instance avec le droit ALTER ANY LOGIN.


# Spécifiez ici le nom du login AD à supprimer
$adLoginToRemove = "DOMAIN\\nom.utilisateur"

# Liste des instances SQL Server (vous pouvez aussi la charger depuis un fichier)
$sqlInstances = @(
    "SERVEUR1\INSTANCE1",
    "SERVEUR2",
    "SERVEUR3\INSTANCE2"
)

# Parcours des instances
foreach ($instance in $sqlInstances) {
    Write-Host "`nConnexion à l'instance $instance..."

    try {
        # Vérifie si le login existe
        $checkLoginQuery = @"
IF EXISTS (SELECT 1 FROM sys.server_principals WHERE name = N'$adLoginToRemove')
    SELECT 1 AS LoginExists
ELSE
    SELECT 0 AS LoginExists
"@

        $loginExists = Invoke-Sqlcmd -ServerInstance $instance -Query $checkLoginQuery

        if ($loginExists.LoginExists -eq 1) {
            Write-Host "→ Le login '$adLoginToRemove' existe. Suppression en cours..."

            $dropLoginQuery = "DROP LOGIN [$adLoginToRemove]"

            Invoke-Sqlcmd -ServerInstance $instance -Query $dropLoginQuery
            Write-Host "✔️ Login supprimé avec succès de $instance"
        } else {
            Write-Host "ℹ️ Le login '$adLoginToRemove' n'existe pas sur $instance"
        }
    }
    catch {
        Write-Warning "⚠️ Erreur lors du traitement de l'instance $instance : $_"
    }
}



Notes
	•	Si tu veux lire les instances depuis un fichier texte (par ex. instances.txt), remplace cette ligne :


$sqlInstances = @(

par

$sqlInstances = Get-Content -Path "C:\chemin\vers\instances.txt"


	•	Le login doit être au format DOMAIN\utilisateur.






Pour exécuter nimporte quel query sur une liste de server

Script PowerShell : exécution de requête sur toutes les instances

# Chemin vers le fichier contenant la liste des instances SQL Server
$instanceListPath = "C:\chemin\vers\instances.txt"

# Charger les instances SQL
$sqlInstances = Get-Content -Path $instanceListPath

# Spécifiez ici votre requête SQL à exécuter
$queryToRun = @"
-- Exemple : afficher les bases de données
SELECT name, state_desc FROM sys.databases
"@

# Boucle sur chaque instance
foreach ($instance in $sqlInstances) {
    Write-Host "`nConnexion à l'instance $instance..."

    try {
        # Exécution de la requête
        $results = Invoke-Sqlcmd -ServerInstance $instance -Query $queryToRun -ErrorAction Stop

        if ($results) {
            Write-Host "✔️ Résultats depuis $instance :"
            $results | Format-Table -AutoSize
        } else {
            Write-Host "ℹ️ Aucune donnée retournée par $instance"
        }
    }
    catch {
        Write-Warning "⚠️ Erreur sur l'instance $instance : $_"
    }
}




pour sauvegarder le fichier

$results | Export-Csv -Path "C:\temp\resultats_$($instance -replace '\\', '_').csv" -NoTypeInformation


exemple de query a changer

$queryToRun = "SELECT @@VERSION AS Version"






autre script pour supprimer les login


# Chemin vers le fichier contenant la liste des instances SQL Server
$instanceListPath = "C:\chemin\vers\instances.txt"

# Charger les instances SQL
$sqlInstances = Get-Content -Path $instanceListPath

# Login AD à supprimer (échappé correctement pour T-SQL)
$loginToDrop = "DOMAIN\\nom.utilisateur"

# Requête complète : vérifie d'abord si le login existe avant de le supprimer
$queryToRun = @"
IF EXISTS (SELECT 1 FROM sys.server_principals WHERE name = N'$loginToDrop')
BEGIN
    DROP LOGIN [$loginToDrop]
    PRINT 'Login supprimé.'
END
ELSE
BEGIN
    PRINT 'Login non trouvé.'
END
"@

# Exécution sur chaque instance
foreach ($instance in $sqlInstances) {
    Write-Host "`nConnexion à $instance..."

    try {
        $result = Invoke-Sqlcmd -ServerInstance $instance -Query $queryToRun -ErrorAction Stop
        Write-Host "✔️ $instance :"
        $result | ForEach-Object { Write-Host $_ }
    }
    catch {
        Write-Warning "⚠️ Erreur sur $instance : $_"
    }
}

Ce que fait ce script
	•	✅ Vérifie l’existence du login sur chaque instance.
	•	✅ Le supprime uniquement s’il est présent.
	•	✅ Affiche un message clair (Login supprimé. ou Login non trouvé.).
	•	❌ Évite les erreurs T-SQL si le login est absent.


voir les session

SELECT 
    s.session_id,
    r.request_id,
    s.login_name,
    s.host_name,
    s.program_name,
    r.status,
    r.command,
    r.start_time,
    r.cpu_time,
    r.total_elapsed_time / 1000.0 AS elapsed_seconds,
    r.memory_usage * 8 AS memory_usage_MB,
    t.text AS sql_text
FROM sys.dm_exec_sessions s
JOIN sys.dm_exec_requests r ON s.session_id = r.session_id
CROSS APPLY sys.dm_exec_sql_text(r.sql_handle) t
ORDER BY r.memory_usage DESC

WHERE s.session_id = 143,



 voir si un plan d'exécution forcé a echoué

SELECT 
    qsp.query_id,
    qsp.plan_id,
    qsp.is_forced_plan,
    qsp.is_forced_plan_failed,
    qsqt.query_sql_text,
    qsp.last_execution_time
FROM sys.query_store_plan qsp
JOIN sys.query_store_query qsq ON qsp.query_id = qsq.query_id
JOIN sys.query_store_query_text qsqt ON qsq.query_text_id = qsqt.query_text_id
WHERE qsp.is_forced_plan = 1;

Si is_forced_plan_failed = 1 → le plan a échoué.












-- 1. Vérification des fonctionnalités Enterprise utilisées (globales)
SELECT 
    feature_name,
    feature_id,
    usage_count,
    last_usage_time
FROM 
    sys.dm_db_persisted_sku_features;

-- 2. Bases de données utilisant TDE (Transparent Data Encryption)
SELECT 
    name AS DatabaseName,
    is_encrypted
FROM 
    sys.databases
WHERE 
    is_encrypted = 1;

-- 3. Index Columnstore (Enterprise uniquement dans certaines versions)
EXEC sp_MSforeachdb '
USE [?];
SELECT 
    DB_NAME() AS DatabaseName,
    OBJECT_NAME(object_id) AS TableName,
    name AS IndexName,
    type_desc
FROM 
    sys.indexes 
WHERE 
    type_desc LIKE ''%COLUMNSTORE%''';

-- 4. Compression de données utilisée sur les index
EXEC sp_MSforeachdb '
USE [?];
SELECT 
    DB_NAME() AS DatabaseName,
    OBJECT_NAME(i.object_id) AS TableName,
    i.name AS IndexName,
    p.data_compression_desc
FROM 
    sys.partitions p
JOIN 
    sys.indexes i ON p.object_id = i.object_id AND p.index_id = p.index_id
WHERE 
    p.data_compression <> 0';

-- 5. Tables partitionnées
EXEC sp_MSforeachdb '
USE [?];
SELECT 
    DB_NAME() AS DatabaseName,
    name AS TableName
FROM 
    sys.tables 
WHERE 
    is_ms_shipped = 0 AND is_partitioned = 1';

-- 6. In-Memory OLTP utilisé
EXEC sp_MSforeachdb '
USE [?];
IF EXISTS (SELECT * FROM sys.tables WHERE is_memory_optimized = 1)
BEGIN
    SELECT 
        DB_NAME() AS DatabaseName,
        name AS TableName,
        durability_desc
    FROM 
        sys.memory_optimized_tables_internal_attributes;
END';

-- 7. Change Data Capture (CDC) utilisé
EXEC sp_MSforeachdb '
USE [?];
IF EXISTS (SELECT * FROM sys.tables WHERE is_tracked_by_cdc = 1)
BEGIN
    SELECT 
        DB_NAME() AS DatabaseName,
        name AS TableName
    FROM 
        sys.tables 
    WHERE 
        is_tracked_by_cdc = 1;
END';







-- 1. Fonctionnalités Enterprise détectées par SQL Server
SELECT 
    feature_name,
    feature_id
FROM 
    sys.dm_db_persisted_sku_features;

-- 2. Bases avec TDE activé (Transparent Data Encryption)
SELECT 
    name AS DatabaseName,
    is_encrypted
FROM 
    sys.databases
WHERE 
    is_encrypted = 1;

-- 3. Recherche d’index COLUMNSTORE
EXEC sp_MSforeachdb '
USE [?];
IF DB_ID(''?'') NOT IN (1,2,3,4)
BEGIN
    SELECT 
        DB_NAME() AS DatabaseName,
        OBJECT_NAME(object_id) AS TableName,
        name AS IndexName,
        type_desc
    FROM 
        sys.indexes
    WHERE 
        type_desc LIKE ''%COLUMNSTORE%''
        AND OBJECTPROPERTY(object_id, ''IsMsShipped'') = 0;
END
';

-- 4. Vérification de la compression utilisée
EXEC sp_MSforeachdb '
USE [?];
IF DB_ID(''?'') NOT IN (1,2,3,4)
BEGIN
    SELECT 
        DB_NAME() AS DatabaseName,
        OBJECT_NAME(p.object_id) AS TableName,
        i.name AS IndexName,
        p.data_compression_desc
    FROM 
        sys.partitions p
    JOIN 
        sys.indexes i ON p.object_id = i.object_id AND p.index_id = i.index_id
    WHERE 
        p.data_compression IN (1, 2) -- 1 = ROW, 2 = PAGE
        AND OBJECTPROPERTY(p.object_id, ''IsMsShipped'') = 0;
END
';

-- 5. Tables partitionnées
EXEC sp_MSforeachdb '
USE [?];
IF DB_ID(''?'') NOT IN (1,2,3,4)
BEGIN
    SELECT 
        DB_NAME() AS DatabaseName,
        name AS TableName
    FROM 
        sys.tables
    WHERE 
        is_partitioned = 1
        AND is_ms_shipped = 0;
END
';

-- 6. In-Memory OLTP (Memory-Optimized Tables)
EXEC sp_MSforeachdb '
USE [?];
IF EXISTS (
    SELECT 1 FROM sys.tables WHERE is_memory_optimized = 1
)
BEGIN
    SELECT 
        DB_NAME() AS DatabaseName,
        name AS TableName
    FROM 
        sys.tables
    WHERE 
        is_memory_optimized = 1;
END
';

-- 7. CDC activé (Change Data Capture)
EXEC sp_MSforeachdb '
USE [?];
IF EXISTS (
    SELECT 1 FROM sys.tables WHERE is_tracked_by_cdc = 1
)
BEGIN
    SELECT 
        DB_NAME() AS DatabaseName,
        name AS TableName
    FROM 
        sys.tables
    WHERE 
        is_tracked_by_cdc = 1;
END
';




voir lez objets partitioner 

EXEC sp_MSforeachdb '
USE [?];
IF DB_ID(''?'') NOT IN (1,2,3,4)
BEGIN
    SELECT 
        DB_NAME() AS DatabaseName,
        t.name AS TableName,
        i.name AS IndexName,
        ps.name AS PartitionScheme
    FROM 
        sys.indexes i
    INNER JOIN 
        sys.tables t ON i.object_id = t.object_id
    INNER JOIN 
        sys.data_spaces ds ON i.data_space_id = ds.data_space_id
    LEFT JOIN 
        sys.partition_schemes ps ON ds.data_space_id = ps.data_space_id
    WHERE 
        ps.name IS NOT NULL
        AND t.is_ms_shipped = 0;
END
';

 voir la taille des fichiers bdd

SELECT 
    db.name AS database_name,
    mf.name AS logical_name,
    mf.physical_name,
    mf.type_desc,
    CAST(mf.size * 8.0 / 1024 / 1024 AS DECIMAL(10,2)) AS size_GB
FROM 
    sys.master_files mf
JOIN 
    sys.databases db ON db.database_id = mf.database_id
ORDER BY 
    db.name, mf.type_desc;




 résumé du tde

-- Liste des bases utilisant TDE
SELECT 
    name AS DatabaseName,
    is_encrypted
INTO #EncryptedDatabases
FROM 
    sys.databases
WHERE 
    is_encrypted = 1;

-- Afficher les certificats et types de chiffrement utilisés pour chaque base
DECLARE @dbName NVARCHAR(128);
DECLARE db_cursor CURSOR FOR
SELECT name FROM #EncryptedDatabases;

CREATE TABLE #TDE_Details (
    DatabaseName NVARCHAR(128),
    EncryptorType NVARCHAR(50),
    Thumbprint VARBINARY(64),
    CertificateName NVARCHAR(128)
);

OPEN db_cursor;
FETCH NEXT FROM db_cursor INTO @dbName;

WHILE @@FETCH_STATUS = 0
BEGIN
    DECLARE @sql NVARCHAR(MAX);
    SET @sql = '
    USE [' + @dbName + '];
    INSERT INTO #TDE_Details (DatabaseName, EncryptorType, Thumbprint, CertificateName)
    SELECT 
        ''' + @dbName + ''' AS DatabaseName,
        dek.encryptor_type,
        dek.encryptor_thumbprint,
        cert.name
    FROM 
        sys.dm_database_encryption_keys dek
    LEFT JOIN 
        master.sys.certificates cert ON dek.encryptor_thumbprint = cert.thumbprint;
    ';
    EXEC (@sql);
    FETCH NEXT FROM db_cursor INTO @dbName;
END

CLOSE db_cursor;
DEALLOCATE db_cursor;

-- Résultat combiné
SELECT * FROM #TDE_Details;

-- Liste des certificats dans master
SELECT 
    name AS CertificateName,
    subject,
    expiry_date,
    thumbprint,
    pvt_key_encryption_type_desc
FROM 
    master.sys.certificates
WHERE 
    issuer_name IS NOT NULL;

-- Liste des clés asymétriques dans master
SELECT 
    name AS AsymKeyName,
    key_algorithm,
    key_length
FROM 
    master.sys.asymmetric_keys;

-- Liste des clés symétriques dans master
SELECT 
    name AS SymKeyName,
    algorithm_desc,
    key_length
FROM 
    master.sys.symmetric_keys
WHERE 
    name != '##MS_DatabaseMasterKey##';

-- Nettoyage
DROP TABLE #EncryptedDatabases;
DROP TABLE #TDE_Details;



*****************************************


✅ 1. Requête pour voir les e-mails envoyés et leur statut

SELECT 
    mailitem.subject,
    mailitem.recipients,
    mailitem.body,
    mailitem.send_request_date,
    mailitem.sent_date,
    mailitem.last_mod_date,
    mailitem.sent_account_id,
    CASE
        WHEN mailitem.sent_status = 'sent' THEN '✅ Succès'
        WHEN mailitem.sent_status = 'failed' THEN '❌ Échec'
        ELSE mailitem.sent_status
    END AS statut,
    log.description AS erreur_message
FROM msdb.dbo.sysmail_allitems AS mailitem
LEFT JOIN msdb.dbo.sysmail_event_log AS log
    ON mailitem.mailitem_id = log.mailitem_id
ORDER BY mailitem.send_request_date DESC;



2. Filtrer par statut si besoin
	•	Pour voir uniquement les mails échoués :


SELECT *
FROM msdb.dbo.sysmail_faileditems
ORDER BY send_request_date DESC;


Pour voir uniquement les mails réussis :

SELECT *
FROM msdb.dbo.sysmail_sentitems
ORDER BY send_request_date DESC;


✅ 3. Voir les logs détaillés Database Mail


SELECT *
FROM msdb.dbo.sysmail_event_log
ORDER BY log_date DESC;


Cela donne le détail des erreurs si un mail échoue (problème SMTP, format, etc.).

⸻

📌 Remarques
	•	Il faut que Database Mail soit activé (sysmail_enable) et configuré.
	•	Les vues sont dans la base système msdb.



✅ 1. Vérifier si le service Database Mail est en cours d’exécution

EXEC msdb.dbo.sysmail_help_status_sp;


✅ 2. Démarrer le service si nécessaire

Si le statut est STOPPED, tu peux le démarrer manuellement :


EXEC msdb.dbo.sysmail_start_sp;

Et pour l’arrêter (utile en cas de maintenance) :

EXEC msdb.dbo.sysmail_stop_sp;



⸻

✅ 4. Vérifier dans l’interface SSMS (GUI)
	1.	Dans SSMS, ouvre “Management” > “Database Mail”.
	2.	Clic droit > View Database Mail Log.
	3.	Tu verras les erreurs (SMTP, authentification, format, etc.).


